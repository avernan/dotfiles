# vim:filetype=sh
# set -x

declare -A ps1

ps1[clear]=$(echo -e '\033[0m')

__git_info() {
    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWSTASHSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    GIT_PS1_SHOWUPSTREAM="verbose name"

    local git_ps1
    if git_ps1=$(__git_ps1 '%s') && [[ -n $git_ps1 ]] ; then
        # Valid git repo. Set elements of array
        ps1_info[git_status]=1
        ps1_info[git_branch]=${git_ps1%% *}
        [[ $git_ps1 =~ \* ]] && ps1_info[git_dirty]=1
        [[ $git_ps1 =~ [^u]\+ ]] && ps1_info[git_staged]=1
        [[ $git_ps1 =~  '$' ]] && ps1_info[git_stash]=1
        [[ $git_ps1 =~  % ]] && ps1_info[git_untracked]=1
        if [[ $git_ps1 =~ ' u' ]] ; then
            # TODO: add commits behind/ahead of origin
            ps1_info[git_remote]=${git_ps1##* }
        fi
    else
        ps1_info[git_status]=0
    fi
}

# TODO: battery

__prompt() {
    local __RET=$?
    declare -A ps1_info

    __git_info

    ps1[cpath]=$(echo -e '\033[1;94m')

    if [[ ${ps1_info[git_status]} == 1 ]] ; then
        ps1[prompt]="î˜‚"
    else
        ps1[prompt]="$"
    fi
    if [[ ${__RET} -ne 0 ]] ; then
        ps1[cprompt]=$(echo -e '\033[91m\033[1m')
        ps1[return]="${__RET} "
    else
        ps1[cprompt]=${ps1[clear]}
        ps1[return]=""
    fi

}

# Time the execution of PROMPT_COMMAND?
if [[ -n $DEBUG ]] ; then
    PROMPT_COMMAND='time __prompt'
else
    PROMPT_COMMAND='__prompt'
fi

PS1=' \
\[${ps1[cpath]}\]\W\[${ps1[clear]}\] \
\[${ps1[cprompt]}\]${ps1[return]}\[${ps1[clear]}\]\
\[${ps1[cprompt]}\]${ps1[prompt]}\[${ps1[clear]}\]\
 '

