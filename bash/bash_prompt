# vim:filetype=sh
# set -x

# File that manages the creation of the nice and informativeâ„¢ prompt

# Load icon sets used for prompt
source ~/.local/bin/devicons.sh
source ~/.local/bin/powerline_icons.sh
source ~/.local/bin/materialdesign_icons.sh

# Define array of icons used in prompt
declare -A ps1_icon

ps1_icon[git]=$(echo -e ${dev[git_branch]})
ps1_icon[sep]=$(echo -e ${powerline[right_hard_divider]})
ps1_icon[keyboard]=$(echo -e ${md[keyboard]})

# Define array of values and escape sequences used in prompt.
#   Static values are defined here and can be used to choose a style
declare -A ps1

# Entries starting with c* identify colours
ps1[cpath]=${escapes[bold]}${escapes[fblB]}

# Set PROMPT_COMMAND so that timing can be dynamically (un)set
PROMPT_COMMAND='__prompt_timing'

# Fetch git-related info and store them in the ps1_info array
__git_info() {
    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWSTASHSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    GIT_PS1_SHOWUPSTREAM="verbose name"

    local git_ps1
    if git_ps1=$(__git_ps1) && [[ -n $git_ps1 ]] ; then
        ps1_info[git]=1
        # Parse the output of __git_ps1 command
        for word in ${git_ps1} ; do
            case $word in
                \(*)
                    ps1_info[git_branch]=${word:1}
                    ;;
                [^a-zA-Z]*)
                    [[ $word =~ '*' ]] && ps1_info[git_dirty]=1
                    [[ $word =~ [^u]\+ ]] && ps1_info[git_staged]=1
                    [[ $word =~  '$' ]] && ps1_info[git_stash]=1
                    [[ $word =~  '%' ]] && ps1_info[git_untracked]=1
                    ;;
                u*)
                    local sword=${word:1}
                    ps1_info[git_ahead]=$(expr "$sword" : '\(\+[0-9]*\)')
                    ps1_info[git_behind]=$(expr "$sword" : '.*\(\-[0-9]*\)')
                    ;;
                [a-zA-Z]*\))
                    ps1_info[git_remote]=${word%/*}
                    ;;
            esac
        done
    else
        ps1_info[git]=0
    fi
}

# TODO: battery

# Fetch info from the different available modules. Set dynamic values of the ps1 array
__prompt_collect_info() {
    [[ $# != 1 ]] && return

    declare -A ps1_info

    __git_info

    if [[ ${ps1_info[git]} == 1 ]] ; then
        ps1[prompt]=${ps1_icon[git]}
        ps1[git_branch]=${ps1_info[git_branch]}
    else
        ps1[prompt]="$"
        ps1[git_branch]=
    fi

    if [[ $1 -ne 0 ]] ; then
        ps1[creturn]=${escapes[bold]}${escapes[freB]}
        if [[ $1 == 130 ]] ; then
            ps1[return]="${ps1_icon[keyboard]} "
        else
            ps1[return]="$1 "
        fi
    else
        ps1[creturn]=
        ps1[return]=
    fi

}

# Build the LHS and RHS prompts and join them.
#       For the moment this is the section to change in order
#       to modify which parts are included in the prompt
__prompt() {
    __prompt_collect_info "$@"

    local PS1L PS1R

    # Set RHS prompt. This can include escape sequences.
    #   No need to use \[ and \] as the $PS1R variable will be
    #   entirely wrapped in \[ \].
    PS1R=""
    PS1R+="${escapes[fgrB]}${ps1_icon[sep]}${escapes[clear]}"
    PS1R+="${escapes[bgrB]}${escapes[fre]}${ps1[git_branch]}${escapes[clear]}"
    PS1R+="$(__true_colors 'fg' 38 38 38)${escapes[bgrB]}${ps1_icon[sep]}${escapes[clear]}"

    # Set LHS prompt.
    #   Wrap non-printable characters in \[ and \]
    PS1L=" "
    PS1L+="\[${ps1[cpath]}\]\W\[${escapes[clear]} \]"
    PS1L+="\[${ps1[creturn]}\]${ps1[return]}\[${escapes[clear]}\]"
    PS1L+="${ps1[prompt]} "

    # Join PS1L and PS1R through the use of the auxiliary function __prompt_rhs
    PS1="\[$(__prompt_rhs "${PS1R}")\]${PS1L}"
}

# Wrapper of the prompt building function (__prompt). This enable to dynamically
#   switch the timing of prompt creation by setting DEBUG=1
__prompt_timing() {
    local __RET=$?
    if [[ -n $DEBUG ]] ; then
        local time_start time_end time_used
        time_start=$(date +%s.%N)
        __prompt $__RET
        time_end=$(date +%s.%N)
        time_used=$(echo $time_end - $time_start | bc -l)
        echo $time_used | tee -a .PS1_timing
    else
        __prompt $__RET
    fi
}

# Strip the RHS part of the prompt ($1, has to be passed as single argument)
#   of all escape sequences. Calculate length of printable characters. Align
#   text to the right.
__prompt_rhs() {
    [[ $# != 1 ]] && return

    local rhs=$1
    local rhs_printable=${rhs//\[+([0-9]|;)m/}
    local length=${#rhs_printable}

    echo -e "$(tput sc; tput cuf $((COLUMNS - length)))${rhs}$(tput rc)"
}
